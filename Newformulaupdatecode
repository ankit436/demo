class FormulaValidator {
    constructor() {
        this.currentAbortController = null;
        this.binaryOperators = ["+", "-", "*", "/", "%", "**"];
        this.unaryOperators = ["+", "-"];
        this.validOperators = [...this.binaryOperators, ...this.unaryOperators, "(", ")"];
        this.formulaType = ["number", "report", "custom"];
    }

    async validate(tokens) {
        if (this.currentAbortController) {
            this.currentAbortController.abort();
        }

        this.currentAbortController = new AbortController();
        const { signal } = this.currentAbortController;

        try {
            return await this._validate(tokens, signal);
        } catch (error) {
            if (error.name === 'AbortError') {
                return { valid: true, errors: null };
            }
            throw error;
        }
    }

    async _validate(tokens, signal) {
        const errors = {};
        let valid = true;
        let bracketStack = [];
        let lastToken = null;
        let asteriskCount = 0;

        for (let index = 0; index < tokens.length; index++) {
            if (signal.aborted) throw new DOMException('Operation aborted', 'AbortError');

            const token = tokens[index];
            const isOperator = token.type === "operator";

            if (isOperator) {
                valid = this._validateOperator(token, lastToken, bracketStack, index, errors, tokens, asteriskCount) && valid;
                asteriskCount = token.value === "*" ? asteriskCount + 1 : 0;
            } else if (this.formulaType.includes(token.type)) {
                valid = this._validateOperand(token, lastToken, index, errors) && valid;
                asteriskCount = 0;
            } else {
                errors[index] = `Invalid token type: ${token.type}`;
                valid = false;
            }

            lastToken = token;
        }

        if (bracketStack.length > 0) {
            bracketStack.forEach(pos => errors[pos] = "Unmatched opening bracket.");
            valid = false;
        }

        if (lastToken && lastToken.type === "operator" && lastToken.value !== ")") {
            errors[tokens.length - 1] = `Operator '${lastToken.value}' at the end is invalid.`;
            valid = false;
        }

        return { valid, errors: valid ? null : errors };
    }

    _validateOperator(token, lastToken, bracketStack, index, errors, tokens, asteriskCount) {
        const nextToken = tokens[index + 1];

        if (token.value === "(") {
            if (lastToken && (this.formulaType.includes(lastToken.type) || lastToken.value === ")")) {
                errors[index] = `Implicit multiplication detected before '(' at position ${index}. Use '*' explicitly.`;
                return false;
            }
            bracketStack.push(index);
        } else if (token.value === ")") {
            if (!bracketStack.length) {
                errors[index] = "Unmatched closing bracket.";
                return false;
            }
            bracketStack.pop();
            if (lastToken && lastToken.type === "operator" && lastToken.value !== ")") {
                errors[index] = `Operator '${lastToken.value}' before ')' is invalid.`;
                return false;
            }
        } else if (this.binaryOperators.includes(token.value)) {
            if (!lastToken && !this.unaryOperators.includes(token.value)) {
                errors[index] = `Invalid operator placement: '${token.value}'`;
                return false;
            }
            if (index === tokens.length - 1) {
                errors[index] = `Operator '${token.value}' at the end is invalid.`;
                return false;
            }
            if ( lastToken && lastToken.type === "operator" && this._isValidBinarySequence(token, lastToken)
                 ) {
                errors[index] = `Binary operator '${token.value}' after another operator is invalid.`;
                return false;
            }
            if (token.value === "*" && asteriskCount >= 2) {
                errors[index] = "More than two consecutive '*' operators are not allowed.";
                return false;
            }
        }

        return true;
    }

    _validateOperand(token, lastToken, index, errors) {
        if (lastToken && (this.formulaType.includes(lastToken.type) || lastToken.value === ")")) {
            errors[index] = "Missing operator between operands.";
            return false;
        }
        return true;
    }

	 _isValidBinarySequence(token, lastToken) {
        return (lastToken.value !== ")" && !this.unaryOperators.includes(token.value)) && !(lastToken.value === "*" && token.value === "*")
    }
}





const validator = new FormulaValidator();

const runTests = async () => {
    const tests = [
        {
            description: "Simple addition",
            tokens: [
                { type: "number", value: "2" },
                { type: "operator", value: "+" },
                { type: "number", value: "3" }
            ],
            expectedValid: true
        },
        {
            description: "Valid mixed operators",
            tokens: [
                { type: "number", value: "5" },
                { type: "operator", value: "*" },
                { type: "number", value: "4" },
                { type: "operator", value: "-" },
                { type: "number", value: "2" }
            ],
            expectedValid: true
        },
        {
            description: "Valid exponentiation",
            tokens: [
                { type: "number", value: "7" },
                { type: "operator", value: "**" },
                { type: "number", value: "2" }
            ],
            expectedValid: true
        },
        {
            description: "Valid consecutive asterisks",
            tokens: [
                { type: "number", value: "3" },
                { type: "operator", value: "*" },
                { type: "operator", value: "*" },
                { type: "number", value: "3" }
            ],
            expectedValid: true
        },
        {
            description: "Valid unary minus",
            tokens: [
                { type: "operator", value: "-" },
                { type: "number", value: "2" },
                { type: "operator", value: "*" },
                { type: "operator", value: "-" },
                { type: "number", value: "3" }
            ],
            expectedValid: true
        },
        {
            description: "Unmatched closing bracket",
            tokens: [
                { type: "number", value: "2" },
                { type: "operator", value: "+" },
                { type: "operator", value: "(" },
                { type: "number", value: "3" },
                { type: "operator", value: ")" },
                { type: "operator", value: ")" }
            ],
            expectedValid: false,
            expectedError: "Unmatched closing bracket."
        },
        {
            description: "Unmatched opening bracket",
            tokens: [
                { type: "operator", value: "(" },
                { type: "number", value: "2" },
                { type: "operator", value: "+" },
                { type: "number", value: "3" }
            ],
            expectedValid: false,
            expectedError: "Unmatched opening bracket."
        },
        {
            description: "Consecutive operators without operand",
            tokens: [
                { type: "number", value: "5" },
                { type: "operator", value: "*" },
                { type: "operator", value: "+" },
                { type: "number", value: "4" }
            ],
            expectedValid: false,
            expectedError: "Binary operator '*' after another operator is invalid."
        },
        {
            description: "More than two consecutive asterisks",
            tokens: [
                { type: "number", value: "2" },
                { type: "operator", value: "*" },
                { type: "operator", value: "*" },
                { type: "operator", value: "*" },
                { type: "number", value: "3" }
            ],
            expectedValid: false,
            expectedError: "More than two consecutive '*' operators are not allowed."
        },
        {
            description: "Missing operator between operands",
            tokens: [
                { type: "number", value: "2" },
                { type: "number", value: "3" }
            ],
            expectedValid: false,
            expectedError: "Missing operator between operands."
        },
        {
            description: "Empty expression",
            tokens: [],
            expectedValid: true
        },
        {
            description: "Single number",
            tokens: [
                { type: "number", value: "5" }
            ],
            expectedValid: true
        },
        {
            description: "Unary minus with no operand",
            tokens: [
                { type: "operator", value: "-" }
            ],
            expectedValid: false,
            expectedError: "Invalid operator placement: '-'"
        },
        {
            description: "Operand followed by closing bracket",
            tokens: [
                { type: "number", value: "5" },
                { type: "operator", value: ")" }
            ],
            expectedValid: false,
            expectedError: "Operand followed by closing bracket",
        },
        {
            description: "Operator at the end",
            tokens: [
                { type: "number", value: "5" },
                { type: "operator", value: "+" }
            ],
            expectedValid: false,
            expectedError: "Operator '+' at the end is invalid."
        },
        {
            description: "Implicit multiplication without '*'",
            tokens: [
                { type: "number", value: "5" },
                { type: "operator", value: "(" },
                { type: "number", value: "3" },
                { type: "operator", value: "+" },
                { type: "number", value: "2" },
                { type: "operator", value: ")" }
            ],
            expectedValid: false,
            expectedError: "Implicit multiplication detected before '(' at position 1. Use '*' explicitly."
        }
    ];

    for (let i = 0; i < tests.length; i++) {
        const test = tests[i];
        const result = await validator.validate(test.tokens);
        console.log(result.valid , test.expectedValid, `Test Case ${i + 1}  Failed: ${test.description}`  );
        if (!test.expectedValid) {
            // console.assert(Object.values(result.errors).includes(test.expectedError), `Test Case ${i + 1} Failed: ${test.description} - Expected Error: ${test.expectedError}`);
        }
    }
    console.log("All tests completed.");
};

runTests();
