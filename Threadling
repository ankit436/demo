from concurrent.futures import ThreadPoolExecutor

def list_projects():
    bu_id = get_parameter('bu_id', request)
    program = get_parameter('program', request)
    phase = get_parameter('phase', request)

    with ThreadPoolExecutor(max_workers=2) as executor:
        # Submitting tasks to the executor
        future_project_list = executor.submit(processor.get_calc_list)
        future_projects = executor.submit(processor.List_projects, bu_id, program, phase)

        # Getting the results from futures
        project_list = future_project_list.result()
        projects = future_projects.result()

    # Post-processing the fields
    projects = post_calc_fields(projects, project_list)
    
    # Returning the success response
    return succ_resp(projects)





from concurrent.futures import ThreadPoolExecutor
import json

def get_calc_list():
    with session_scope() as session:
        with ThreadPoolExecutor(max_workers=2) as executor:
            # Define the tasks to be executed concurrently
            future_report_rows = executor.submit(
                lambda: session.query(Report.project_id).distinct().all()
            )
            future_formulae_rows = executor.submit(
                lambda: session.query(Expression.expression, Expression.name, ReportType.project_id)
                .filter(Expression.report_type_id == ReportType.id)
                .all()
            )
            
            # Get the results from the futures
            report_project_ids = {row.project_id for row in future_report_rows.result()}
            formulae_rows_dict = {
                row.project_id: json.loads(row.expression) for row in future_formulae_rows.result()
            }

    return report_project_ids, formulae_rows_dict
