import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Row, Col, Spin } from 'antd';
import CardItem from './CardItem';

const CardList = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [page, setPage] = useState(1);
  const [loadedPages, setLoadedPages] = useState(new Set());
  const observerRef = useRef(null);
  const lastCardRef = useRef(null);

  const loadData = useCallback(async (pageToLoad) => {
    if (loadedPages.has(pageToLoad) || loading || !hasMore) return;

    setLoading(true);

    try {
      const newData = await fetchData(pageToLoad);
      if (newData.length === 0) {
        setHasMore(false);
      } else {
        setData((prevData) => [...prevData, ...newData]);
        setLoadedPages((prev) => new Set(prev).add(pageToLoad));
        setPage((prevPage) => Math.max(prevPage, pageToLoad));
      }
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  }, [loadedPages, loading, hasMore]);

  useEffect(() => {
    const initialLoad = async () => {
      for (let i = 1; i <= 3; i++) {
        await loadData(i);
      }
    };

    if (data.length === 0) {
      initialLoad();
    }
  }, [data.length, loadData]);

  useEffect(() => {
    if (!hasMore || loading) return;

    const observerCallback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting || entry.intersectionRatio > 0) {
          const nextPage = parseInt(entry.target.dataset.page, 10) + 1;
          loadData(nextPage);
        }
      });
    };

    observerRef.current = new IntersectionObserver(observerCallback, {
      root: null,
      rootMargin: '0px',
      threshold: 0.2, // Trigger when 20% of the target is visible
    });

    if (lastCardRef.current) {
      observerRef.current.observe(lastCardRef.current);
    }

    return () => {
      observerRef.current?.disconnect();
    };
  }, [data, hasMore, loading, loadData]);

  useEffect(() => {
    if (lastCardRef.current) {
      observerRef.current?.unobserve(lastCardRef.current);
    }
    const lastCard = document.querySelector('[data-last-card="true"]');
    if (lastCard) {
      lastCardRef.current = lastCard;
      observerRef.current?.observe(lastCard);
    }
  }, [data]);

  return (
    <div style={{ padding: '20px' }}>
      <Row gutter={[16, 16]}>
        {data.map((item, index) => (
          <Col
            key={index}
            xs={24}
            sm={12}
            md={8}
            data-page={Math.floor(index / 12)}
            data-last-card={index === data.length - 1 ? 'true' : null}
          >
            <CardItem data={item} />
          </Col>
        ))}
      </Row>
      {loading && (
        <div style={{ textAlign: 'center', padding: '20px' }}>
          <Spin />
        </div>
      )}
      {!hasMore && !loading && (
        <div style={{ textAlign: 'center', padding: '20px', color: 'grey' }}>
          No more data to load
        </div>
      )}
    </div>
  );
};

// Mocked fetchData function
const fetchData = async (page) => {
  const data = [
    { id: 1, title: 'Item 1', description: 'Description of Item 1' },
    { id: 2, title: 'Item 2', description: 'Description of Item 2' },
    { id: 3, title: 'Item 3', description: 'Description of Item 3' },
    { id: 4, title: 'Item 4', description: 'Description of Item 4' },
    { id: 5, title: 'Item 5', description: 'Description of Item 5' },
    { id: 6, title: 'Item 6', description: 'Description of Item 6' },
    { id: 7, title: 'Item 7
