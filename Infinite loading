import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Row, Col, Spin } from 'antd';
import CardItem from './CardItem';

const CardList = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [page, setPage] = useState(1);
  const [loadedPages, setLoadedPages] = useState(new Set());
  const observerRef = useRef(null);
  const lastCardRef = useRef(null);

  const loadData = useCallback(
    async (pageToLoad) => {
      if (loadedPages.has(pageToLoad) || loading) return;

      setLoading(true);

      try {
        const newData = await fetchData(pageToLoad);
        if (newData.length === 0) {
          setHasMore(false);
        } else {
          setData((prevData) => [...prevData, ...newData]);
          setLoadedPages((prev) => new Set(prev).add(pageToLoad));
          setPage((prevPage) => Math.max(prevPage, pageToLoad));
        }
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setLoading(false);
      }
    },
    [loadedPages, loading]
  );

  useEffect(() => {
    if (!loading && hasMore) {
      const options = {
        root: null, // Use the viewport as the root
        rootMargin: '0px',
        threshold: 0.1, // Trigger when 10% of the target is visible
      };

      observerRef.current = new IntersectionObserver((entries) => {
        const lastCard = entries[0];
        if (lastCard.isIntersecting) {
          setPage((prevPage) => prevPage + 1);
        }
      }, options);

      if (lastCardRef.current) {
        observerRef.current.observe(lastCardRef.current);
      }
    }

    return () => observerRef.current?.disconnect();
  }, [loading, hasMore, data]);

  useEffect(() => {
    loadData(page);
  }, [page, loadData]);

  return (
    <div style={{ padding: '20px' }}>
      <Row gutter={[16, 16]}>
        {data.map((item, index) => (
          <Col
            key={index}
            xs={24}
            sm={12}
            md={8}
            ref={index === data.length - 1 ? lastCardRef : null}
          >
            <CardItem data={item} />
          </Col>
        ))}
      </Row>
      {loading && data.length === 0 && (
        <div style={{ textAlign: 'center', padding: '20px' }}>
          <Spin />
        </div>
      )}
      {!hasMore && !loading && (
        <div style={{ textAlign: 'center', padding: '20px', color: 'grey' }}>
          No more data to load
        </div>
      )}
    </div>
  );
};

// Mocked fetchData function with support for AbortController
const fetchData = async (page) => {
  const data = [
    { id: 1, title: 'Item 1', description: 'Description of Item 1' },
    { id: 2, title: 'Item 2', description: 'Description of Item 2' },
    { id: 3, title: 'Item 3', description: 'Description of Item 3' },
    { id: 4, title: 'Item 4', description: 'Description of Item 4' },
    { id: 5, title: 'Item 5', description: 'Description of Item 5' },
    { id: 6, title: 'Item 6', description: 'Description of Item 6' },
    { id: 7, title: 'Item 7', description: 'Description of Item 7' },
    { id: 8, title: 'Item 8', description: 'Description of Item 8' },
    { id: 9, title: 'Item 9', description: 'Description of Item 9' },
    { id: 10, title: 'Item 10', description: 'Description of Item 10' },
  ];

  const pageSize = 3;
  const start = (page - 1) * pageSize;
  const end = start + pageSize;

  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(data.slice(start, end));
    }, 1000); // Simulate network delay
  });
};

export default CardList;
