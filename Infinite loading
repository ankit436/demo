import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Row, Col, Spin } from 'antd';
import CardItem from './CardItem';

const CardList = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [loadedPages, setLoadedPages] = useState(new Set());
  const pageSize = 12;
  const observerRef = useRef(null);
  const lastCardRef = useRef(null);

  const loadData = useCallback(
    async (pageToLoad) => {
      if (loading || loadedPages.has(pageToLoad) || !hasMore) return;

      setLoading(true);
      try {
        const newData = await fetchData(pageToLoad);
        if (newData.length === 0) {
          setHasMore(false);
        } else {
          setData((prevData) => [...prevData, ...newData]);
          setLoadedPages((prev) => new Set(prev).add(pageToLoad));
        }
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setLoading(false);
      }
    },
    [loading, hasMore, loadedPages]
  );

  useEffect(() => {
    if (data.length === 0 && loadedPages.size === 0) {
      loadData(1);
      loadData(2);
      loadData(3);
    }
  }, [data.length, loadData, loadedPages.size]);

  useEffect(() => {
    if (!hasMore || loading) return;

    const observerCallback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting || entry.intersectionRatio > 0) {
          const nextPage = Math.floor(data.length / pageSize) + 1;
          if (!loadedPages.has(nextPage)) {
            loadData(nextPage);
          }
        }
      });
    };

    observerRef.current = new IntersectionObserver(observerCallback, {
      root: null,
      rootMargin: '0px',
      threshold: 0.1, // Trigger when 10% of the target is visible
    });

    if (lastCardRef.current) {
      observerRef.current.observe(lastCardRef.current);
    }

    return () => {
      observerRef.current?.disconnect();
    };
  }, [data, hasMore, loading, loadData]);

  useEffect(() => {
    if (lastCardRef.current) {
      observerRef.current?.unobserve(lastCardRef.current);
    }

    const lastCard = document.querySelector('[data-last-card="true"]');
    if (lastCard) {
      lastCardRef.current = lastCard;
      observerRef.current?.observe(lastCard);
    }
  }, [data]);

  return (
    <div style={{ padding: '20px' }}>
      <Row gutter={[16, 16]}>
        {data.map((item, index) => (
          <Col
            key={index}
            xs={24}
            sm={12}
            md={8}
            data-page={Math.floor(index / pageSize) + 1}
            data-last-card={index === data.length - 1 ? 'true' : null}
          >
            <CardItem data={item} />
          </Col>
        ))}
      </Row>
      {loading && (
        <div style={{ textAlign: 'center', padding: '20px' }}>
          <Spin />
        </div>
      )}
      {!hasMore && !loading && (
        <div style={{ textAlign: 'center', padding: '20px', color: 'grey' }}>
          No more data to load
        </div>
      )}
    </div>
  );
};

// Mocked fetchData function
const fetchData = async (page) => {
  const data = [
    { id: 1, title: 'Item 1', description: 'Description of Item 1' },
    { id: 2, title: 'Item 2', description: 'Description of Item 2' },
    { id: 3, title: 'Item 3', description: 'Description of Item 3' },
    { id: 4, title: 'Item 4', description: 'Description of Item 4' },
    { id: 5, title: 'Item 5', description: 'Description of Item 5' },
    { id: 6, title: 'Item 6', description: 'Description of Item 6' },
    { id: 7, title: 'Item 7', description: 'Description of Item 7' },
    { id: 8, title: 'Item 8', description: 'Description of Item 8' },
    { id: 9, title: 'Item 9', description: 'Description of Item 9' },
    { id: 10, title: 'Item 10', description: 'Description of Item 10' },
    { id: 11, title: 'Item 11', description: 'Description of Item 11' },
    { id: 12, title: 'Item 12', description: 'Description of Item 12' },
    { id: 13, title: 'Item 13', description: 'Description of Item 13' },
    { id: 14, title: 'Item 14', description: 'Description of Item 14' },
    { id: 15, title: 'Item 15', description: 'Description of Item 15' },
    { id: 16, title: 'Item 16', description: 'Description of Item 16' },
    { id: 17, title: 'Item 17', description: 'Description of Item 17' },
    { id: 18, title: 'Item 18', description: 'Description of Item 18' },
    { id: 19, title: 'Item 19', description: 'Description of Item 19' },
    { id: 20, title: 'Item 20', description: 'Description of Item 20' },
    { id: 21, title: 'Item 21', description: 'Description of Item 21' },
    { id: 22, title: 'Item 22', description: 'Description of Item 22' },
    { id: 23, title: 'Item 23', description: 'Description of Item 23' },
    { id: 24, title: 'Item 24', description: 'Description of Item 24' },
    { id: 25, title: 'Item 25', description: 'Description of Item 25' },
    { id: 26, title: 'Item 26', description: 'Description of Item 26' },
    { id: 27, title: 'Item 27', description: 'Description of Item 27' },
    { id: 28, title: 'Item 28', description: 'Description of Item 28' },
    { id: 29, title: 'Item 29', description: 'Description of Item 29' },
    { id: 30, title: 'Item 30', description: 'Description of Item 30' },
    { id: 31, title: 'Item 31', description: 'Description of Item 31' },
    { id: 32, title: 'Item 32', description: 'Description of Item 32' },
    { id: 33, title: 'Item 33', description: 'Description of Item 33' },
    { id: 34, title: 'Item 34', description: 'Description of Item 34' },
    { id: 35, title: 'Item 35', description: 'Description of Item 35' },
    { id: 36, title: 'Item
