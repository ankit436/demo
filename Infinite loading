import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Row, Col, Spin } from 'antd';
import CardItem from './CardItem';

const CardList = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [page, setPage] = useState(1);
  const observerRef = useRef(null);
  const sentinelRef = useRef(null);

  const loadData = useCallback(
    async (pageToLoad) => {
      if (loading || !hasMore) return;

      setLoading(true);

      try {
        const newData = await fetchData(pageToLoad);
        if (newData.length === 0) {
          setHasMore(false);
        } else {
          setData((prevData) => [...prevData, ...newData]);
        }
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setLoading(false);
      }
    },
    [loading, hasMore]
  );

  useEffect(() => {
    // Load initial 3 pages
    const loadInitialPages = async () => {
      for (let i = 1; i <= 3; i++) {
        await loadData(i);
      }
      setPage(4); // Set page to the next one to be loaded
    };

    loadInitialPages();
  }, [loadData]);

  useEffect(() => {
    // Setup Intersection Observer to observe the 24th last card
    if (observerRef.current) observerRef.current.disconnect();

    observerRef.current = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && hasMore) {
          setPage((prevPage) => prevPage + 1);
        }
      },
      { threshold: 0.1 }
    );

    if (data.length >= 24) {
      const sentinelIndex = data.length - 24;
      const sentinelElement = document.getElementById(`card-${sentinelIndex}`);
      if (sentinelElement) {
        sentinelRef.current = sentinelElement;
        observerRef.current.observe(sentinelElement);
      }
    }

    return () => observerRef.current?.disconnect();
  }, [data, hasMore]);

  useEffect(() => {
    if (page > 3) { // Since the first 3 pages are already loaded
      loadData(page);
    }
  }, [page, loadData]);

  return (
    <div style={{ padding: '20px' }}>
      <Row gutter={[16, 16]}>
        {data.map((item, index) => (
          <Col
            key={item.id}
            id={`card-${index}`}
            xs={24}
            sm={12}
            md={8}
          >
            <CardItem data={item} />
          </Col>
        ))}
      </Row>
      {loading && (
        <div style={{ textAlign: 'center', padding: '20px' }}>
          <Spin />
        </div>
      )}
      {!hasMore && (
        <div style={{ textAlign: 'center', padding: '20px', color: 'grey' }}>
          No more data to load
        </div>
      )}
    </div>
  );
};

// Mocked fetchData function
const fetchData = async (page) => {
  const data = [
    { id: 1, title: 'Item 1', description: 'Description of Item 1' },
    { id: 2, title: 'Item 2', description: 'Description of Item 2' },
    { id: 3, title: 'Item 3', description: 'Description of Item 3' },
    { id: 4, title: 'Item 4', description: 'Description of Item 4' },
    { id: 5, title: 'Item 5', description: 'Description of Item 5' },
    { id: 6, title: 'Item 6', description: 'Description of Item 6' },
    { id: 7, title: 'Item 7', description: 'Description of Item 7' },
    { id: 8, title: 'Item 8', description: 'Description of Item 8' },
    { id: 9, title: 'Item 9', description: 'Description of Item 9' },
    { id: 10, title: 'Item 10', description: 'Description of Item 10' },
    // Add more items as needed
  ];

  const pageSize = 3;
  const start = (page - 1) * pageSize;
  const end = start + pageSize;

  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(data.slice(start, end));
    }, 1000); // Simulate network delay
  });
};

export default CardList;
