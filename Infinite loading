import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Row, Col, Spin } from 'antd';
import CardItem from './CardItem';

const CardList = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [loadedPages, setLoadedPages] = useState(new Set());
  const observerRef = useRef(null);
  const lastCardRef = useRef(null);
  const pageSize = 12;

  const loadData = useCallback(
    async (pageToLoad) => {
      if (loadedPages.has(pageToLoad) || loading || !hasMore) return;

      setLoading(true);

      try {
        const newData = await fetchData(pageToLoad);
        if (newData.length === 0) {
          setHasMore(false);
        } else {
          setData((prevData) => [...prevData, ...newData]);
          setLoadedPages((prev) => new Set(prev).add(pageToLoad));
        }
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setLoading(false);
      }
    },
    [loadedPages, loading, hasMore]
  );

  useEffect(() => {
    const initialLoad = async () => {
      for (let i = 1; i <= 3; i++) {
        await loadData(i);
      }
    };

    if (data.length === 0 && !loadedPages.size) {
      initialLoad();
    }
  }, [data.length, loadData, loadedPages]);

  useEffect(() => {
    if (!hasMore || loading) return;

    const observerCallback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting || entry.intersectionRatio > 0) {
          const nextPage = Math.floor(data.length / pageSize) + 1;
          if (!loadedPages.has(nextPage)) {
            loadData(nextPage);
          }
        }
      });
    };

    observerRef.current = new IntersectionObserver(observerCallback, {
      root: null,
      rootMargin: '0px',
      threshold: 0.2, // Trigger when 20% of the target is visible
    });

    if (lastCardRef.current) {
      observerRef.current.observe(lastCardRef.current);
    }

    return () => {
      observerRef.current?.disconnect();
    };
  }, [data, hasMore, loading, loadData, loadedPages]);

  useEffect(() => {
    if (lastCardRef.current) {
      observerRef.current?.unobserve(lastCardRef.current);
    }
    const lastCard = document.querySelector('[data-last-card="true"]');
    if (lastCard) {
      lastCardRef.current = lastCard;
      observerRef.current?.observe(lastCard);
    }
  }, [data]);

  return (
    <div style={{ padding: '20px' }}>
      <Row gutter={[16, 16]}>
        {data.map((item, index) => (
          <Col
            key={index}
            xs={24}
            sm={12}
            md={8}
            data-page={Math.floor(index / pageSize) + 1}
            data-last-card={index === data.length - 1 ? 'true' : null}
          >
            <CardItem data={item} />
          </Col>
        ))}
      </Row>
      {loading && (
        <div style={{ textAlign: 'center', padding: '20px' }}>
          <Spin />
        </div>
      )}
      {!hasMore && !loading && (
        <div style={{ textAlign: 'center', padding: '20px', color: 'grey' }}>
          No more data to load
        </div>
      )}
