import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem, QPushButton, QLabel, QLineEdit, QMessageBox
import contacts_db

class ContactManager(QWidget):
    def __init__(self):
        super().__init__()

        self.initUI()
        self.loadContacts()

    def initUI(self):
        self.setWindowTitle('Contact List')

        self.layout = QVBoxLayout()
        
        self.contactListWidget = QWidget()
        self.contactListLayout = QVBoxLayout()
        
        self.table = QTableWidget()
        self.table.setColumnCount(5)
        self.table.setHorizontalHeaderLabels(['ID', 'Name', 'Surname', 'Phone', 'Email', 'Actions'])
        self.contactListLayout.addWidget(self.table)

        self.addContactBtn = QPushButton('Add new Contact')
        self.addContactBtn.clicked.connect(self.showAddForm)
        self.contactListLayout.addWidget(self.addContactBtn)
        
        self.contactListWidget.setLayout(self.contactListLayout)
        self.layout.addWidget(self.contactListWidget)
        
        self.contactFormWidget = QWidget()
        self.contactFormLayout = QVBoxLayout()
        
        self.formTitle = QLabel('Add/Update Contact Info')
        self.contactFormLayout.addWidget(self.formTitle)
        
        self.contactId = QLineEdit()
        self.contactId.setPlaceholderText('ID')
        self.contactId.setReadOnly(True)
        self.contactFormLayout.addWidget(self.contactId)
        
        self.contactName = QLineEdit()
        self.contactName.setPlaceholderText('Name')
        self.contactFormLayout.addWidget(self.contactName)
        
        self.contactSurname = QLineEdit()
        self.contactSurname.setPlaceholderText('Surname')
        self.contactFormLayout.addWidget(self.contactSurname)
        
        self.contactPhone = QLineEdit()
        self.contactPhone.setPlaceholderText('Phone Number')
        self.contactFormLayout.addWidget(self.contactPhone)
        
        self.contactEmail = QLineEdit()
        self.contactEmail.setPlaceholderText('Email')
        self.contactFormLayout.addWidget(self.contactEmail)
        
        self.submitBtn = QPushButton('Submit')
        self.submitBtn.clicked.connect(self.submitForm)
        self.contactFormLayout.addWidget(self.submitBtn)
        
        self.backBtn = QPushButton('Back')
        self.backBtn.clicked.connect(self.showContactList)
        self.contactFormLayout.addWidget(self.backBtn)
        
        self.contactFormWidget.setLayout(self.contactFormLayout)
        self.layout.addWidget(self.contactFormWidget)
        
        self.setLayout(self.layout)
        self.showContactList()
        
    def loadContacts(self):
        self.table.setRowCount(0)
        contacts = contacts_db.get_all_contacts()
        for contact in contacts:
            self.addContactToTable(contact)

    def addContactToTable(self, contact):
        rowPosition = self.table.rowCount()
        self.table.insertRow(rowPosition)
        
        for i, value in enumerate(contact):
            self.table.setItem(rowPosition, i, QTableWidgetItem(str(value)))

        editButton = QPushButton('Edit')
        editButton.clicked.connect(lambda checked, contact=contact: self.showEditForm(contact))
        self.table.setCellWidget(rowPosition, 5, editButton)
        
        deleteButton = QPushButton('Delete')
        deleteButton.clicked.connect(lambda checked, contact_id=contact[0]: self.deleteContact(contact_id))
        self.table.setCellWidget(rowPosition, 6, deleteButton)

    def showContactList(self):
        self.contactFormWidget.hide()
        self.contactListWidget.show()
        self.loadContacts()

    def showAddForm(self):
        self.contactId.clear()
        self.contactName.clear()
        self.contactSurname.clear()
        self.contactPhone.clear()
        self.contactEmail.clear()
        self.formTitle.setText('Add Contact')
        self.contactListWidget.hide()
        self.contactFormWidget.show()

    def showEditForm(self, contact):
        self.contactId.setText(str(contact[0]))
        self.contactName.setText(contact[1])
        self.contactSurname.setText(contact[2])
        self.contactPhone.setText(contact[3])
        self.contactEmail.setText(contact[4])
        self.formTitle.setText('Edit Contact')
        self.contactListWidget.hide()
        self.contactFormWidget.show()

    def submitForm(self):
        contact_id = self.contactId.text()
        name = self.contactName.text()
        surname = self.contactSurname.text()
        phone = self.contactPhone.text()
        email = self.contactEmail.text()

        if not name or not surname or not phone or not email:
            QMessageBox.warning(self, 'Error', 'Please fill in all fields')
            return

        if contact_id:
            contacts_db.update_contact(contact_id, name, surname, phone, email)
        else:
            contacts_db.add_contact(name, surname, phone, email)

        self.showContactList()

    def deleteContact(self, contact_id):
        contacts_db.delete_contact(contact_id)
        self.showContactList()

if __name__ == '__main__':
    contacts_db.initialize_db()

    app = QApplication(sys.argv)
    ex = ContactManager()
    ex.show()
    sys.exit(app.exec_())
