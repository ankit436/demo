import tkinter as tk
from tkinter import ttk

class PopupClosedException(Exception):
    pass

class RootUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Root UI")

        # Create a button to trigger the alert
        alert_button = ttk.Button(self.root, text="Show Alert", command=self.show_alert)
        alert_button.pack(pady=20)

    def show_alert(self):
        try:
            # Create a Toplevel window for the alert
            alert_window = tk.Toplevel(self.root)
            alert_window.title("Alert")

            # Make the alert window transient to the root window (modal)
            alert_window.transient(self.root)

            # Bind the close event to the on_cancel function
            alert_window.protocol("WM_DELETE_WINDOW", self.on_cancel)

            # Add content to the alert window
            label = ttk.Label(alert_window, text="This is a continue alert.")
            label.pack(padx=20, pady=10)

            continue_button = ttk.Button(alert_window, text="Continue", command=self.on_continue)
            continue_button.pack(pady=10)

            cancel_button = ttk.Button(alert_window, text="Cancel", command=self.on_cancel)
            cancel_button.pack(pady=10)

            # Wait for the alert window to close
            alert_window.wait_window()

        except PopupClosedException:
            # Handle the exception raised when the popup is closed
            print("Exception: Popup closed")

    def on_continue(self):
        # Continue with your main program logic here
        print("Continuing...")

    def on_cancel(self):
        # Raise a custom exception to indicate the popup was closed
        raise PopupClosedException()

if __name__ == "__main__":
    root = tk.Tk()
    root_ui = RootUI(root)
    root.mainloop()
