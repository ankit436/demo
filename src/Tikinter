import tkinter as tk
from tkinter import ttk
import threading

class ProgressBarLogic:
    def __init__(self, total_count):
        self.total_count = total_count
        self.root = tk.Tk()
        self.progress_bar = ttk.Progressbar(self.root, length=400, mode="determinate")
        self.progress_bar.pack(padx=20, pady=20)
        self.root.protocol("WM_DELETE_WINDOW", self.close_window)

    def simulate_progress(self, progressing_count):
        total_progress_length = (progressing_count / self.total_count) * 100
        self.progress_bar["value"] = total_progress_length

        if progressing_count < self.total_count:
            # Schedule the next update after a delay
            self.root.after(100, self.simulate_progress, progressing_count + 1)

    def start_progress(self):
        self.root.mainloop()

    def close_window(self):
        self.root.destroy()

class AnotherClass:
    def __init__(self, total_count):
        self.progress_bar_logic = ProgressBarLogic(total_count)

    def do_something_with_progress(self):
        self.progress_bar_logic.start_progress()

        # Start the progress updates
        self.progress_bar_logic.simulate_progress(1)

if __name__ == "__main__":
    total_count = 100
    another_class_instance = AnotherClass(total_count)

    # Perform work with progress updates
    another_class_instance.do_something_with_progress()
