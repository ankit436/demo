from org.transcrypt.stubs.browser import __pragma__, document, window, console

contacts = []

def show_contact_list():
    document.getElementById("contactList").style.display = "block"
    document.getElementById("contactForm").style.display = "none"

def show_contact_form(contact_id):
    document.getElementById("contactList").style.display = "none"
    document.getElementById("contactForm").style.display = "block"
    
    contact = next(contact for contact in contacts if contact['id'] == contact_id)
    document.getElementById("contactId").value = str(contact['id'])
    document.getElementById("contactName").value = contact['name']
    document.getElementById("contactSurname").value = contact['surname']
    document.getElementById("contactPhone").value = contact['phone']
    document.getElementById("contactEmail").value = contact['email']

def add_or_update_contact(event):
    event.preventDefault()
    contact_id = document.getElementById("contactId").value
    name = document.getElementById("contactName").value
    surname = document.getElementById("contactSurname").value
    phone = document.getElementById("contactPhone").value
    email = document.getElementById("contactEmail").value
    
    contact = {
        'id': int(contact_id) if contact_id else None,
        'name': name,
        'surname': surname,
        'phone': phone,
        'email': email
    }
    
    method = 'PUT' if contact_id else 'POST'
    url = '/api/contacts'
    
    console.log(f"Sending {method} request to {url} with data:", contact)  # Debugging log
    
    window.fetch(url, {
        'method': method,
        'headers': {'Content-Type': 'application/json'},
        'body': JSON.stringify(contact)
    }).then(
        lambda response: response.json() if response.ok else Promise.reject(response.statusText)
    ).then(
        lambda data: {
            console.log("Response received:", data);  // Debugging log
            update_contact_table();
        }
    ).catch(lambda error: console.log("Fetch error:", error))

    show_contact_list()

def update_contact_table():
    window.fetch('/api/contacts').then(
        lambda response: response.json()
    ).then(
        lambda data: {
            console.log("Contacts data received:", data);  // Debugging log
            contacts = data  # Update global contacts data
            render_contact_table();
        }
    ).catch(lambda error: console.log("Fetch error:", error))

def render_contact_table():
    table_body = document.getElementById("contactTableBody")
    table_body.innerHTML = ''
    for contact in contacts:
        row = document.createElement("tr")
        
        cell_id = document.createElement("td")
        cell_id.innerHTML = str(contact['id'])
        row.appendChild(cell_id)
        
        cell_name = document.createElement("td")
        cell_name.innerHTML = contact['name']
        row.appendChild(cell_name)
        
        cell_surname = document.createElement("td")
        cell_surname.innerHTML = contact['surname']
        row.appendChild(cell_surname)
        
        cell_phone = document.createElement("td")
        cell_phone.innerHTML = contact['phone']
        row.appendChild(cell_phone)
        
        cell_email = document.createElement("td")
        cell_email.innerHTML = contact['email']
        row.appendChild(cell_email)
        
        cell_actions = document.createElement("td")
        
        # Edit button
        edit_button = document.createElement("button")
        edit_button.innerHTML = "Edit"
        edit_button.setAttribute("data-contact-id", str(contact['id']))  # Set contact id as data attribute
        edit_button.onclick = on_edit_button_click  # Assign event handler
        cell_actions.appendChild(edit_button)
        
        # Delete button
        delete_button = document.createElement("button")
        delete_button.innerHTML = "Delete"
        delete_button.setAttribute("data-contact-id", str(contact['id']))  # Set contact id as data attribute
        delete_button.onclick = on_delete_button_click  # Assign event handler
        cell_actions.appendChild(delete_button)
        
        row.appendChild(cell_actions)
        table_body.appendChild(row)

def on_edit_button_click(event):
    contact_id = event.target.getAttribute("data-contact-id")
    show_contact_form(contact_id)

def on_delete_button_click(event):
    contact_id = event.target.getAttribute("data-contact-id")
    delete_contact(contact_id)

def delete_contact(contact_id):
    console.log(f"Sending DELETE request with contact ID: {contact_id}")  # Debugging log
    
    window.fetch('/api/contacts', {
        'method': 'DELETE',
        'headers': {'Content-Type': 'application/json'},
        'body': JSON.stringify({'id': contact_id})
    }).then(
        lambda response: response.json() if response.ok else Promise.reject(response.statusText)
    ).then(
        lambda data: {
            console.log("Delete response:", data);  // Debugging log
            update_contact_table();
        }
    ).catch(lambda error: console.log("Fetch error:", error))

def main():
    document.getElementById("addContactBtn").onclick = lambda: show_contact_form(None)
    document.getElementById("form").onsubmit = add_or_update_contact
    document.getElementById("backBtn").onclick = show_contact_list
    update_contact_table()
    show_contact_list()

main()
