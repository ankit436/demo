import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Row, Col, Spin } from 'antd';
import CardItem from './CardItem';

const CardList = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [loadedPages, setLoadedPages] = useState(new Set());
  const [preloading, setPreloading] = useState(false);
  const abortControllerRef = useRef(null); // UseRef for AbortController

  const loadData = useCallback(async () => {
    if (loadedPages.has(page) || !hasMore || loading) return;

    // Cancel the previous request
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }

    const controller = new AbortController();
    abortControllerRef.current = controller;

    setLoading(true);
    try {
      const newData = await fetchData(page, controller.signal);
      if (newData.length === 0) {
        setHasMore(false);
      } else {
        setData((prevData) => [...prevData, ...newData]);
        setLoadedPages((prev) => new Set(prev).add(page));
      }
    } catch (error) {
      if (error.name !== 'AbortError') {
        console.error('Error fetching data:', error);
      }
    } finally {
      setLoading(false);
    }
  }, [page, loadedPages, hasMore, loading]);

  useEffect(() => {
    loadData();
  }, [loadData]);

  useEffect(() => {
    const preloadNextPage = async () => {
      if (hasMore && !preloading && !loadedPages.has(page + 1)) {
        setPreloading(true);
        try {
          const newData = await fetchData(page + 1);
          if (newData.length === 0) {
            setHasMore(false);
          } else {
            setData((prevData) => [...prevData, ...newData]);
            setLoadedPages((prev) => new Set(prev).add(page + 1));
          }
        } catch (error) {
          if (error.name !== 'AbortError') {
            console.error('Error preloading data:', error);
          }
        } finally {
          setPreloading(false);
        }
      }
    };

    preloadNextPage();
  }, [hasMore, page, preloading, loadedPages]);

  const debounce = (func, delay) => {
    let timeout;
    return (...args) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func(...args), delay);
    };
  };

  const handleScroll = useCallback(
    debounce(() => {
      const scrolledToBottom = window.innerHeight + window.scrollY >= document.body.offsetHeight - 300;

      if (scrolledToBottom && hasMore && !loading && !preloading) {
        setPage((prevPage) => prevPage + 1);
      }
    }, 200), // Adjust debounce time as needed
    [hasMore, loading, preloading]
  );

  useEffect(() => {
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [handleScroll]);

  return (
    <div style={{ padding: '20px' }}>
      <Row gutter={[16, 16]}>
        {data.map((item, index) => (
          <Col key={index} xs={24} sm={12} md={8}>
            <CardItem data={item} />
          </Col>
        ))}
      </Row>
      {loading && page === 1 && (
        <div style={{ textAlign: 'center', padding: '20px' }}>
          <Spin />
        </div>
      )}
      {!hasMore && (
        <div style={{ textAlign: 'center', padding: '20px', color: 'grey' }}>
          No more data to load
        </div>
      )}
    </div>
  );
};

// Mocked fetchData function with support for AbortController
const fetchData = async (page, signal) => {
  // Mocked data
  const data = [
    { id: 1, title: 'Item 1', description: 'Description of Item 1' },
    { id: 2, title: 'Item 2', description: 'Description of Item 2' },
    { id: 3, title: 'Item 3', description: 'Description of Item 3' },
    { id: 4, title: 'Item 4', description: 'Description of Item 4' },
    { id: 5, title: 'Item 5', description: 'Description of Item 5' },
    { id: 6, title: 'Item 6', description: 'Description of Item 6' },
    { id: 7, title: 'Item 7', description: 'Description of Item 7' },
    { id: 8, title: 'Item
