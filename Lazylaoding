import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Row, Col, Spin } from 'antd';
import CardItem from './CardItem';

const CardList = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [loadedPages, setLoadedPages] = useState(new Set());
  const [inProgressPages, setInProgressPages] = useState(new Set());
  const abortControllerRef = useRef(null);

  // Function to load data for a specific page
  const loadData = useCallback(
    async (pageToLoad) => {
      if (loadedPages.has(pageToLoad) || inProgressPages.has(pageToLoad) || !hasMore) return;

      // Mark page as in-progress
      setInProgressPages((prev) => new Set(prev).add(pageToLoad));

      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }

      const controller = new AbortController();
      abortControllerRef.current = controller;

      setLoading(true);
      try {
        const newData = await fetchData(pageToLoad, controller.signal);
        if (newData.length === 0) {
          setHasMore(false);
        } else {
          setData((prevData) => [...prevData, ...newData]);
          setLoadedPages((prev) => new Set(prev).add(pageToLoad));
        }
      } catch (error) {
        if (error.name !== 'AbortError') {
          console.error('Error fetching data:', error);
        }
      } finally {
        // Remove page from in-progress set
        setInProgressPages((prev) => {
          const newSet = new Set(prev);
          newSet.delete(pageToLoad);
          return newSet;
        });
        setLoading(false);
      }
    },
    [hasMore, loadedPages, inProgressPages]
  );

  // Effect to load data for the current page
  useEffect(() => {
    if (!loadedPages.has(page) && !inProgressPages.has(page)) {
      loadData(page);
    }
  }, [page, loadData, loadedPages, inProgressPages]);

  // Debounced scroll handler
  const debounce = (func, delay) => {
    let timeout;
    return (...args) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func(...args), delay);
    };
  };

  const handleScroll = useCallback(
    debounce(() => {
      const scrolledToBottom = window.innerHeight + window.scrollY >= document.body.offsetHeight - 300;

      if (scrolledToBottom && hasMore && !loading && !inProgressPages.has(page + 1)) {
        setPage((prevPage) => prevPage + 1);
      }
    }, 200),
    [hasMore, loading, page, inProgressPages]
  );

  useEffect(() => {
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [handleScroll]);

  return (
    <div style={{ padding: '20px' }}>
      <Row gutter={[16, 16]}>
        {data.map((item, index) => (
          <Col key={index} xs={24} sm={12} md={8}>
            <CardItem data={item} />
          </Col>
        ))}
      </Row>
      {loading && page === 1 && (
        <div style={{ textAlign: 'center', padding: '20px' }}>
          <Spin />
        </div>
      )}
      {!hasMore && (
        <div style={{ textAlign: 'center', padding: '20px', color: 'grey' }}>
          No more data to load
        </div>
      )}
    </div>
  );
};

// Mocked fetchData function with support for AbortController
const fetchData = async (page, signal) => {
  // Mocked data
  const data = [
    { id: 1, title: 'Item 1', description: 'Description of Item 1' },
    { id: 2, title: '
