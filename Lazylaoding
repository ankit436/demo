// CardList.js
import React, { useState, useEffect, useRef } from 'react';
import { Row, Col, Spin } from 'antd';
import CardItem from './CardItem';

const CardList = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [loadedPages, setLoadedPages] = useState(new Set());
  const abortController = useRef(null);
  const loadingRef = useRef(false);

  useEffect(() => {
    // Initial data load
    const loadData = async (page) => {
      if (loadingRef.current || loadedPages.has(page) || !hasMore) return;

      setLoading(true);
      loadingRef.current = true;

      // AbortController to cancel ongoing requests if needed
      abortController.current = new AbortController();
      const signal = abortController.current.signal;

      try {
        const newData = await fetchData(page, signal);
        if (newData.length === 0) {
          setHasMore(false);
        } else {
          setData((prevData) => [...prevData, ...newData]);
          setLoadedPages((prev) => new Set(prev).add(page));
        }
      } catch (error) {
        if (error.name !== 'AbortError') {
          console.error('Fetch error:', error);
        }
      } finally {
        setLoading(false);
        loadingRef.current = false;
      }
    };

    // Load the first page initially
    if (data.length === 0) {
      loadData(1);
    }

    // Preload the next page if necessary
    if (hasMore && !loading && !loadingRef.current) {
      const nextPage = Math.floor(data.length / 15) + 1;
      if (!loadedPages.has(nextPage)) {
        loadData(nextPage);
      }
    }
  }, [data.length, hasMore, loadedPages]);

  const handleScroll = () => {
    const scrolledToBottom = window.innerHeight + window.scrollY >= document.body.offsetHeight - 300;

    if (scrolledToBottom && hasMore && !loading && !loadingRef.current) {
      const nextPage = Math.floor(data.length / 15) + 1;
      if (!loadedPages.has(nextPage)) {
        loadData(nextPage);
      }
    }
  };

  useEffect(() => {
    window.addEventListener('scroll', handleScroll);
    return () => {
      window.removeEventListener('scroll', handleScroll);
      // Cleanup: cancel ongoing fetch if the component unmounts
      if (abortController.current) {
        abortController.current.abort();
      }
    };
  }, [data.length, hasMore, loading]);

  return (
    <div style={{ padding: '20px' }}>
      <Row gutter={[16, 16]}>
        {data.map((item, index) => (
          <Col key={index} xs={24} sm={12} md={8}>
            <CardItem data={item} />
          </Col>
        ))}
      </Row>
      {loading && (
        <div style={{ textAlign: 'center', padding: '20px' }}>
          <Spin />
        </div>
      )}
      {!hasMore && (
        <div style={{ textAlign: 'center', padding: '20px', color: 'grey' }}>
          No more data to load
        </div>
      )}
    </div>
  );
};

// Mocked fetchData function
const fetchData = async (page, signal) => {
  // Mocked data
  const data = Array.from({ length: 100 }, (_, i) => ({
    id: i + 1,
    title: `Item ${i + 1}`,
    description: `Description of Item ${i + 1}`,
  }));

  const pageSize = 15;
  const start = (page - 1) * pageSize;
  const end = start + pageSize;

  return new Promise((resolve, reject) => {
    const timer = setTimeout(() => {
      resolve(data.slice(start, end));
    }, 1000); // Simulate network delay

    signal?.addEventListener('abort', () => {
      clearTimeout(timer);
      reject(new DOMException('Request aborted', 'AbortError'));
    });
  });
};

export default CardList;
