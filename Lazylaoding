// CardList.js
import React, { useState, useEffect, useRef } from 'react';
import { Row, Col, Spin } from 'antd';
import CardItem from './CardItem';

const CardList = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [loadedPages, setLoadedPages] = useState(new Set());
  const loadingRef = useRef(false);

  useEffect(() => {
    // Initial data load
    const loadData = async (page) => {
      if (loadingRef.current || loadedPages.has(page) || !hasMore) return;

      setLoading(true);
      loadingRef.current = true;

      const newData = await fetchData(page);
      if (newData.length === 0) {
        setHasMore(false);
      } else {
        setData((prevData) => [...prevData, ...newData]);
        setLoadedPages((prev) => new Set(prev).add(page));
      }

      setLoading(false);
      loadingRef.current = false;
    };

    // Load the first page initially
    if (data.length === 0) {
      loadData(1);
    }

    // Preload the next page if necessary
    if (hasMore && !loading && !loadingRef.current) {
      const nextPage = data.length / 3 + 1; // assuming 3 items per page
      if (!loadedPages.has(nextPage)) {
        loadData(nextPage);
      }
    }
  }, [data.length, hasMore, loadedPages]);

  const handleScroll = () => {
    const scrolledToBottom = window.innerHeight + window.scrollY >= document.body.offsetHeight - 300;

    if (scrolledToBottom && hasMore && !loading && !loadingRef.current) {
      const nextPage = data.length / 3 + 1; // assuming 3 items per page
      if (!loadedPages.has(nextPage)) {
        loadData(nextPage);
      }
    }
  };

  useEffect(() => {
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [data.length, hasMore, loading]);

  return (
    <div style={{ padding: '20px' }}>
      <Row gutter={[16, 16]}>
        {data.map((item, index) => (
          <Col key={index} xs={24} sm={12} md={8}>
            <CardItem data={item} />
          </Col>
        ))}
      </Row>
      {loading && (
        <div style={{ textAlign: 'center', padding: '20px' }}>
          <Spin />
        </div>
      )}
      {!hasMore && (
        <div style={{ textAlign: 'center', padding: '20px', color: 'grey' }}>
          No more data to load
        </div>
      )}
    </div>
  );
};

// Mocked fetchData function
const fetchData = async (page) => {
  // Mocked data
  const data = [
    { id: 1, title: 'Item 1', description: 'Description of Item 1' },
    { id: 2, title: 'Item 2', description: 'Description of Item 2' },
    { id: 3, title: 'Item 3', description: 'Description of Item 3' },
    { id: 4, title: 'Item 4', description: 'Description of Item 4' },
    { id: 5, title: 'Item 5', description: 'Description of Item 5' },
    { id: 6, title: 'Item 6', description: 'Description of Item 6' },
    { id: 7, title: 'Item 7', description: 'Description of Item 7' },
    { id: 8, title: 'Item 8', description: 'Description of Item 8' },
    { id: 9, title: 'Item 9', description: 'Description of Item 9' },
    { id: 10, title: 'Item 10', description: 'Description of Item 10' },
    // Add more items if needed
  ];

  const pageSize = 3;
  const start = (page - 1) * pageSize;
  const end = start + pageSize;

  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(data.slice(start, end));
    }, 1000); // Simulate network delay
  });
};

export default CardList;
