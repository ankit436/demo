import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Row, Col, Spin } from 'antd';
import CardItem from './CardItem';

const CardList = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true); // Initially true for the first load
  const [preloading, setPreloading] = useState(false);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [loadedPages, setLoadedPages] = useState(new Set());
  const abortControllerRef = useRef(null);

  const loadData = useCallback(
    async (pageToLoad, isPreload = false) => {
      if (loadedPages.has(pageToLoad) || (isPreload ? preloading : loading) || !hasMore) return;

      if (abortControllerRef.current) {
        abortControllerRef.current.abort();
      }

      const controller = new AbortController();
      abortControllerRef.current = controller;

      if (isPreload) setPreloading(true);
      else setLoading(true);

      try {
        const newData = await fetchData(pageToLoad, controller.signal);
        if (newData.length === 0) {
          setHasMore(false);
        } else {
          setData((prevData) => [...prevData, ...newData]);
          setLoadedPages((prev) => new Set(prev).add(pageToLoad));
        }
      } catch (error) {
        if (error.name !== 'AbortError') {
          console.error('Error fetching data:', error);
        }
      } finally {
        if (isPreload) setPreloading(false);
        else setLoading(false);
      }
    },
    [hasMore, loadedPages, preloading, loading]
  );

  useEffect(() => {
    if (!loadedPages.has(1)) {
      loadData(1);
    }
  }, [loadData, loadedPages]);

  const debounce = (func, delay) => {
    let timeout;
    return (...args) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func(...args), delay);
    };
  };

  const handleScroll = useCallback(
    debounce(() => {
      const scrolledToBottom = window.innerHeight + window.scrollY >= document.body.offsetHeight - 300;

      if (scrolledToBottom && hasMore && !preloading && !loadedPages.has(page + 1)) {
        setPage((prevPage) => prevPage + 1);
      }
    }, 200),
    [hasMore, preloading, page, loadedPages]
  );

  useEffect(() => {
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [handleScroll]);

  useEffect(() => {
    if (page > 1) {
      loadData(page, true); // Preload for subsequent pages
    }
  }, [page, loadData]);

  return (
    <div style={{ padding: '20px' }}>
      <Row gutter={[16, 16]}>
        {data.map((item, index) => (
          <Col key={index} xs={24} sm={12} md={8}>
            <CardItem data={item} />
          </Col>
        ))}
      </Row>
      {loading && (
        <div style={{ textAlign: 'center', padding: '20px' }}>
          <Spin />
        </div>
      )}
      {!hasMore && !loading && (
        <div style={{ textAlign: 'center', padding: '20px', color: '
