import sys
import sqlite3
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidget, QTableWidgetItem, QVBoxLayout, QWidget, QPushButton, QLineEdit, QFormLayout, QDialog, QHBoxLayout, QMessageBox, QHeaderView


class ContactListWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Contact List')
        self.setGeometry(100, 100, 800, 600)

        # Layout and Table
        self.layout = QVBoxLayout()
        self.table = QTableWidget()
        self.layout.addWidget(self.table)

        self.load_data()

        # Add New Contact Button
        self.new_contact_btn = QPushButton('Add New Contact')
        self.new_contact_btn.clicked.connect(self.open_new_contact_window)
        self.new_contact_btn.setStyleSheet("""
            QPushButton {
                background-color: #5cb85c;
                color: white;
                padding: 5px 10px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #4cae4c;
            }
        """)
        self.layout.addWidget(self.new_contact_btn)

        # Container widget
        self.container = QWidget()
        self.container.setLayout(self.layout)
        self.setCentralWidget(self.container)

    def load_data(self):
        connection = sqlite3.connect('contacts.db')
        query = "SELECT * FROM contacts"
        result = connection.execute(query)
        
        self.table.setRowCount(0)
        self.table.setColumnCount(6)
        self.table.setHorizontalHeaderLabels(["ID", "Name", "Surname", "Phone Number", "Email", "Actions"])

        for row_number, row_data in enumerate(result):
            self.table.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.table.setItem(row_number, column_number, QTableWidgetItem(str(data)))

            # Edit and Delete buttons
            edit_button = QPushButton('Edit')
            edit_button.clicked.connect(lambda _, row=row_number: self.open_edit_contact_window(row))
            edit_button.setStyleSheet("""
                QPushButton {
                    background-color: #5bc0de;
                    color: white;
                    padding: 5px 10px;
                    border-radius: 5px;
                }
                QPushButton:hover {
                    background-color: #31b0d5;
                }
            """)

            delete_button = QPushButton('Delete')
            delete_button.clicked.connect(lambda _, row=row_number: self.delete_contact(row))
            delete_button.setStyleSheet("""
                QPushButton {
                    background-color: #d9534f;
                    color: white;
                    padding: 5px 10px;
                    border-radius: 5px;
                }
                QPushButton:hover {
                    background-color: #c9302c;
                }
            """)

            button_layout = QHBoxLayout()
            button_layout.addWidget(edit_button)
            button_layout.addWidget(delete_button)
            button_widget = QWidget()
            button_widget.setLayout(button_layout)
            self.table.setCellWidget(row_number, 5, button_widget)

        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table.verticalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
        connection.close()

    def open_new_contact_window(self):
        self.new_contact_window = NewContactWindow()
        self.new_contact_window.exec_()
        self.load_data()

    def open_edit_contact_window(self, row):
        id_item = self.table.item(row, 0)
        if id_item:
            contact_id = id_item.text()
            self.edit_contact_window = NewContactWindow(contact_id)
            self.edit_contact_window.exec_()
            self.load_data()

    def delete_contact(self, row):
        id_item = self.table.item(row, 0)
        if id_item:
            contact_id = id_item.text()
            confirm = QMessageBox.question(self, 'Confirm Delete', 'Are you sure you want to delete this contact?',
                                           QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if confirm == QMessageBox.Yes:
                connection = sqlite3.connect('contacts.db')
                cursor = connection.cursor()
                cursor.execute("DELETE FROM contacts WHERE id = ?", (contact_id,))
                connection.commit()
                connection.close()
                self.load_data()


class NewContactWindow(QDialog):
    def __init__(self, contact_id=None):
        super().__init__()
        self.setWindowTitle('Add/Update Contact')
        self.setGeometry(150, 150, 400, 300)

        self.contact_id = contact_id

        self.layout = QFormLayout()
        self.id_input = QLineEdit()
        self.name_input = QLineEdit()
        self.surname_input = QLineEdit()
        self.phone_input = QLineEdit()
        self.email_input = QLineEdit()

        self.layout.addRow('ID', self.id_input)
        self.layout.addRow('Name', self.name_input)
        self.layout.addRow('Surname', self.surname_input)
        self.layout.addRow('Phone Number', self.phone_input)
        self.layout.addRow('Email', self.email_input)

        # Submit and Back Buttons
        self.button_layout = QHBoxLayout()
        self.submit_btn = QPushButton('Submit')
        self.submit_btn.clicked.connect(self.submit_contact)
        self.submit_btn.setStyleSheet("""
            QPushButton {
                background-color: #5cb85c;
                color: white;
                padding: 5px 10px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #4cae4c;
            }
        """)
        self.back_btn = QPushButton('Back')
        self.back_btn.clicked.connect(self.close)
        self.back_btn.setStyleSheet("""
            QPushButton {
                background-color: #5bc0de;
                color: white;
                padding: 5px 10px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #31b0d5;
            }
        """)

        self.button_layout.addWidget(self.submit_btn)
        self.button_layout.addWidget(self.back_btn)

        self.layout.addRow(self.button_layout)
        self.setLayout(self.layout)

        if self.contact_id:
            self.load_contact_data()

    def load_contact_data(self):
        connection = sqlite3.connect('contacts.db')
        query = "SELECT * FROM contacts WHERE id = ?"
        result = connection.execute(query, (self.contact_id,))
        contact = result.fetchone()
        connection.close()

        if contact:
            self.id_input.setText(str(contact[0]))
            self.name_input.setText(contact[1])
            self.surname_input.setText(contact[2])
            self.phone_input.setText(contact[3])
            self.email_input.setText(contact[4])

        self.id_input.setDisabled(True)

    def submit_contact(self):
        name = self.name_input.text().strip()
        surname = self.surname_input.text().strip()
        phone = self.phone_input.text().strip()
        email = self.email_input.text().strip()

        if not name or not phone or not email:
            QMessageBox.warning(self, 'Input Error', 'Name, Phone Number, and Email are required.')
            return

        connection = sqlite3.connect('contacts.db')
        cursor = connection.cursor()

        if self.contact_id:
            cursor.execute("UPDATE contacts SET name = ?, surname = ?, phone_number = ?, email = ? WHERE id = ?", 
                           (name, surname, phone, email, self.contact_id))
        else:
            cursor.execute("INSERT INTO contacts (name, surname, phone_number, email) VALUES (?, ?, ?, ?)", 
                           (name, surname, phone, email))
        
        connection.commit()
        connection.close()

        self.close()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    main_window = ContactListWindow()
    main_window.show()
    sys.exit(app.exec_())
